/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include <arpa/inet.h>
#include <stdio.h>   //printf
#include <stdlib.h>  //exit(0);
#include <string.h>  //memset
#include <sys/socket.h>

#include <iostream>
#include <string>
#include <unordered_set>

#include "communicate.h"

#define BUFLEN 512  // Max length of buffer
#define MAXCLIENT 7

void sendToClient(char *ip, int port, char *Article);
std::string *ParseInput(std::string input);

void die(char *s) {
    perror(s);
    exit(1);
}

int current_client_count = 0;

struct client_info {
    char *IP;
    int Port;
    bool used = false;
    bool SubscribedList[8];
    std::unordered_set<std::string> SubscribedOriginator;
    std::unordered_set<std::string> SubscribedOrg;
};

client_info client_list[MAXCLIENT];

bool_t *join_1_svc(char *IP, int Port, struct svc_req *rqstp) {
    static bool_t result;

    std::cout << "Join:\n";
    std::cout << "\tClient IP: " << IP << ":" << Port << std::endl << std::endl;

    if (current_client_count == MAXCLIENT) {
        std::cout << "\tClient list is full\n";
        result = false;
        return &result;
    }

    int empty_slot = -1;

    // check if the client is already in the list and keep track of the
    // number of clients
    for (int i = 0; i < MAXCLIENT; i++) {
        if (client_list[i].used == true) {
            if (strcmp(client_list[i].IP, IP) == 0 &&
                client_list[i].Port == Port) {
                std::cout << "\tClient already in the list\n";
                result = true;
                return &result;
            }
        }
        if (empty_slot == -1 && client_list[i].used == false) {
            empty_slot = i;
        }
    }

    // FIXME: use better data structure?
    if (empty_slot != -1) {
        client_list[empty_slot].IP = new char[strlen(IP) + 1];
        strcpy(client_list[empty_slot].IP, IP);

        client_list[empty_slot].Port = Port;
        client_list[empty_slot].used = true;
        current_client_count++;
        result = true;
    } else {
        std::cout << "\tWerid...\n";
        std::cout << "\tNo empty slot for new client\n";
        result = false;
    }

    return &result;
}

bool_t *leave_1_svc(char *IP, int Port, struct svc_req *rqstp) {
    static bool_t result;

    std::cout << "Leave: \n";
    std::cout << "\tClient IP: " << IP << ":" << Port << std::endl << std::endl;

    for (int i = 0; i < MAXCLIENT; i++) {
        if (client_list[i].used == true) {
            if (strcmp(client_list[i].IP, IP) == 0 &&
                client_list[i].Port == Port) {
                client_list[i].used = false;
                delete client_list[i].IP;
                current_client_count--;
                result = true;
                return &result;
            }
        }
    }

    result = false;
    return &result;
}

bool_t *subscribe_1_svc(char *IP, int Port, char *Article,
                        struct svc_req *rqstp) {
    static bool_t result;

    printf("Subscribe:\n");
    std::cout << "\tClient IP: " << IP << ":" << Port << std::endl;

    std::string *parsedInput = ParseInput(Article);

    if (parsedInput[0] == "") {
        result = false;
        return &result;
    }

    if (parsedInput[3] != "") {
        result = false;
        return &result;
    }

    int i;
    for (i = 0; i < MAXCLIENT; i++) {
        if (client_list[i].used == true) {
            if (strcmp(client_list[i].IP, IP) == 0 &&
                client_list[i].Port == Port) {
                break;
            }
        }
    }

    if (i == MAXCLIENT) {
        std::cout << "Client not found\n";
        result = false;
        return &result;
    }

    if (parsedInput[1] != "") {
        client_list[i].SubscribedOriginator.insert(parsedInput[1]);
    }

    if (parsedInput[2] != "") {
        client_list[i].SubscribedOrg.insert(parsedInput[2]);
    }

    std::cout << "\tTopic: " << parsedInput[0] << std::endl;
    std::cout << "\tOriginator: " << parsedInput[1] << std::endl;
    std::cout << "\tOrganization: " << parsedInput[2] << std::endl << std::endl;

    switch (parsedInput[0][0]) {
        case 'S':
            if (parsedInput[0][1] == 'p') {
                client_list[i].SubscribedList[0] = true;
                result = true;
            } else if (parsedInput[0][1] == 'c') {
                client_list[i].SubscribedList[5] = true;
                result = true;
            } else
                result = false;
            break;
        case 'L':
            client_list[i].SubscribedList[1] = true;
            result = true;
            break;
        case 'E':
            client_list[i].SubscribedList[2] = true;
            result = true;
            break;
        case 'B':
            client_list[i].SubscribedList[3] = true;
            result = true;
            break;
        case 'T':
            client_list[i].SubscribedList[4] = true;
            result = true;
            break;
        case 'P':
            client_list[i].SubscribedList[6] = true;
            result = true;
            break;
        case 'H':
            client_list[i].SubscribedList[7] = true;
            result = true;
            break;
        default:
            result = false;
            break;
    }

    return &result;
}

bool_t *unsubscribe_1_svc(char *IP, int Port, char *Article,
                          struct svc_req *rqstp) {
    static bool_t result;

    printf("Unsubscribe:\n");
    std::cout << "\tClient IP: " << IP << ":" << Port << std::endl;

    // Make sure the input is valid
    std::string *parsedInput = ParseInput(Article);

    if (parsedInput[0] == "") {
        result = false;
        return &result;
    }

    if (parsedInput[3] != "") {
        result = false;
        return &result;
    }

    int i;
    for (i = 0; i < MAXCLIENT; i++) {
        if (client_list[i].used == true) {
            if (strcmp(client_list[i].IP, IP) == 0 &&
                client_list[i].Port == Port) {
                break;
            }
        }
    }

    if (i == MAXCLIENT) {
        std::cout << "Client not found\n";
        result = false;
        return &result;
    }

    if (parsedInput[1] != "") {
        client_list[i].SubscribedOriginator.erase(parsedInput[1]);
    }

    if (parsedInput[2] != "") {
        client_list[i].SubscribedOrg.erase(parsedInput[2]);
    }

    std::cout << "\tTopic: " << parsedInput[0] << std::endl;
    std::cout << "\tOriginator: " << parsedInput[1] << std::endl;
    std::cout << "\tOrganization: " << parsedInput[2] << std::endl << std::endl;

    switch (Article[0]) {
        case 'S':
            if (Article[1] == 'p') {
                client_list[i].SubscribedList[0] = false;
                result = true;
            } else if (Article[1] == 'c') {
                client_list[i].SubscribedList[5] = false;
                result = true;
            } else
                result = false;

            break;
        case 'L':
            client_list[i].SubscribedList[1] = false;
            result = true;
            break;
        case 'E':
            client_list[i].SubscribedList[2] = false;
            result = true;
            break;
        case 'B':
            client_list[i].SubscribedList[3] = false;
            result = true;
            break;
        case 'T':
            client_list[i].SubscribedList[4] = false;
            result = true;
            break;
        case 'P':
            client_list[i].SubscribedList[6] = false;
            result = true;
            break;
        case 'H':
            client_list[i].SubscribedList[7] = false;
            result = true;
            break;
        default:
            result = false;
            break;
    }

    return &result;
}

bool_t *publish_1_svc(char *Article, char *IP, int Port,
                      struct svc_req *rqstp) {
    static bool_t result;

    std::cout << "Publish:\n";
    std::cout << "\tClient IP: " << IP << ":" << Port << std::endl;

    std::string *parsedInput = ParseInput(Article);

    if (parsedInput[0] == "" && parsedInput[1] == "" && parsedInput[2] == "") {
        result = false;
        parsedInput->clear();
        return &result;
    }

    if (parsedInput[3] == "") {
        result = false;
        parsedInput->clear();
        return &result;
    }

    std::string str(Article);

    std::size_t pos = str.find(";");

    std::string category = parsedInput[0];
    int category_index = -1;

    switch (parsedInput[0][0]) {
        case 'S':
            if (Article[1] == 'p')
                category_index = 0;
            else if (Article[1] == 'c')
                category_index = 5;
            else
                result = -1;

            break;
        case 'L':
            category_index = 1;
            break;
        case 'E':
            category_index = 2;
            break;
        case 'B':
            category_index = 3;
            break;
        case 'T':
            category_index = 4;
            break;
        case 'P':
            category_index = 6;
            break;
        case 'H':
            category_index = 5;
            break;
        default:
            result = false;
            break;
    }

    // std::cout << "Category: " << category_index << std::endl;
    std::cout << "\tTopic: " << parsedInput[0] << std::endl;
    std::cout << "\tOriginator: " << parsedInput[1] << std::endl;
    std::cout << "\tOrganization: " << parsedInput[2] << std::endl;
    std::cout << "\tContent: " << parsedInput[3] << std::endl;

    std::string sendMessage =
        "Subject: " + parsedInput[0] + "\n" + "Originator: " + parsedInput[1] +
        "\n" + "Org: " + parsedInput[2] + "\n\t" + parsedInput[3];
    const int length = sendMessage.length();

    char *content_char_array = new char[length + 1];
    strcpy(content_char_array, sendMessage.c_str());

    for (int i = 0; i < MAXCLIENT; i++) {
        if (client_list[i].used == true) {
            if ((category_index != -1 &&
                 client_list[i].SubscribedList[category_index] == true) ||
                client_list[i].SubscribedOriginator.find(parsedInput[1]) !=
                    client_list[i].SubscribedOriginator.end() ||
                client_list[i].SubscribedOrg.find(parsedInput[2]) !=
                    client_list[i].SubscribedOrg.end()) {
                std::cout << "\t> Sent to " << client_list[i].IP << " "
                          << client_list[i].Port << std::endl;
                sendToClient(client_list[i].IP, client_list[i].Port,
                             content_char_array);
            }
        }
    }

    std::cout << std::endl;
    result = true;
    parsedInput->clear();
    return &result;
}

bool_t *ping_1_svc(struct svc_req *rqstp) {
    static bool_t result = true;

    std::cout << "Ping!\n\n";

    return &result;
}

void sendToClient(char *ip, int port, char *message) {
    struct sockaddr_in si_other;
    int s, i;
    socklen_t slen = sizeof(si_other);

    if ((s = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == -1) {
        die((char *)"socket");
    }

    memset((char *)&si_other, 0, sizeof(si_other));
    si_other.sin_family = AF_INET;
    si_other.sin_port = htons(port);

    if (inet_aton(ip, &si_other.sin_addr) == 0) {
        printf("inet_aton() failed: %d", port);
        fprintf(stderr, "inet_aton() failed\n");
        exit(1);
    }

    // send the message
    if (sendto(s, message, strlen(message), 0, (struct sockaddr *)&si_other,
               slen) == -1) {
        die((char *)"sendto()");
    }
}

std::string *ParseInput(std::string input) {
    // input is in the form of "type;originator;org;contents"
    std::string *result = new std::string[4];
    std::size_t pos;

    for (int i = 0; i < 4; i++) {
        pos = input.find(";");
        if (pos == std::string::npos) {
            result[i] = input;
            return result;
        }
        result[i] = input.substr(0, pos);
        input = input.substr(pos + 1);
    }

    return result;
}